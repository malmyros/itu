{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onLoadData","state","term","offset","limit","fetch","method","mode","cache","credentials","headers","then","response","json","data","setState","results","concat","onChangeTerm","e","target","value","onSearch","this","className","Navbar","color","light","expand","NavbarBrand","href","Input","onChange","Button","onClick","Container","dataLength","length","next","hasMore","loader","map","result","index","key","alt","trackName","src","artworkUrl100","artistName","primaryGenreName","releaseDate","previewUrl","controls","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0TAmGeA,E,kDA5Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaRC,WAAa,WAAO,IAAD,EACa,EAAKC,MAA5BC,EADU,EACVA,KAAMC,EADI,EACJA,OAAQC,EADJ,EACIA,MACrBC,MAAM,wCAAD,OAAyCH,EAAzC,uDAA4FC,EAA5F,kBAA4GC,GAAS,CACxHE,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,eAAgB,sBAGfC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZC,QAAS,EAAKf,MAAMe,QAAQC,OAAOH,EAAKE,SACxCb,OAAQ,EAAKF,MAAME,OAAS,GAC5BC,MAAO,EAAKH,MAAMG,MAAQ,SA9BjB,EAmCnBc,aAAe,SAACC,GACd,EAAKJ,SAAS,CACZb,KAAMiB,EAAEC,OAAOC,SArCA,EAyCnBC,SAAW,WACT,EAAKP,SAAS,CACZC,QAAS,GACTb,OAAQ,EACRC,MAAO,KACN,kBAAM,EAAKJ,iBA5Cd,EAAKC,MAAQ,CACXe,QAAS,GACTd,KAAM,KACNC,OAAQ,EACRC,MAAO,IANQ,E,gEAWjBmB,KAAKvB,e,+BAuCL,OACI,yBAAKwB,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,UACA,kBAACC,EAAA,EAAD,CACIV,MAAOE,KAAKtB,MAAMC,MAAQ,GAC1B8B,SAAUT,KAAKL,eACnB,kBAACe,EAAA,EAAD,CAAQP,MAAM,YAAYQ,QAASX,KAAKD,UAAxC,WAEF,kBAACa,EAAA,EAAD,KACE,4BACE,kBAAC,IAAD,CACIC,WAAYb,KAAKtB,MAAMe,QAAQqB,OAC/BC,KAAMf,KAAKvB,WACXuC,SAAS,EACTC,OAAQ,2CACTjB,KAAKtB,MAAMe,QACPyB,KAAI,SAACC,EAAQC,GACZ,OACI,wBAAIC,IAAG,iBAAYD,IACjB,yBAAKE,IAAKH,EAAOI,UAAWC,IAAKL,EAAOM,gBACxC,yBAAKxB,UAAU,WACb,yBAAKA,UAAW,cAAekB,EAAOI,WACtC,yBAAKtB,UAAW,eAAgBkB,EAAOO,YACvC,yBAAKzB,UAAW,SAAUkB,EAAOQ,kBACjC,yBAAK1B,UAAW,gBAAiBkB,EAAOS,aACxC,2BAAOJ,IAAKL,EAAOU,WAAYC,UAAQ,GAAvC,iE,GA7EZC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.82197dfc.chunk.js","sourcesContent":["import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport {Button, Container, Input, Navbar, NavbarBrand} from 'reactstrap'\nimport InfiniteScroll from 'react-infinite-scroll-component'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: [],\n      term: 'U2',\n      offset: 0,\n      limit: 25,\n    }\n  }\n\n  componentDidMount() {\n    this.onLoadData()\n  }\n\n  onLoadData = () => {\n    const {term, offset, limit} = this.state\n    fetch(`https://itunes.apple.com/search?term=${term}&entity=musicArtist,album,musicTrack&offset=${offset}&limit=${limit}`, {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n        .then(response => response.json())\n        .then(data => {\n          this.setState({\n            results: this.state.results.concat(data.results),\n            offset: this.state.offset + 25,\n            limit: this.state.limit + 25,\n          })\n        })\n  }\n\n  onChangeTerm = (e) => {\n    this.setState({\n      term: e.target.value,\n    })\n  }\n\n  onSearch = () => {\n    this.setState({\n      results: [],\n      offset: 0,\n      limit: 25,\n    }, () => this.onLoadData())\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <Navbar color=\"light\" light expand=\"md\">\n            <NavbarBrand href=\"/\">Itunes</NavbarBrand>\n            <Input\n                value={this.state.term || ''}\n                onChange={this.onChangeTerm}/>\n            <Button color=\"secondary\" onClick={this.onSearch}>Search</Button>\n          </Navbar>\n          <Container>\n            <ul>\n              <InfiniteScroll\n                  dataLength={this.state.results.length}\n                  next={this.onLoadData}\n                  hasMore={true}\n                  loader={<h4>Loading...</h4>}>\n                {this.state.results\n                    .map((result, index) => {\n                      return (\n                          <li key={`result-${index}`}>\n                            <img alt={result.trackName} src={result.artworkUrl100}/>\n                            <div className=\"wrapper\">\n                              <div className={'track-name'}>{result.trackName}</div>\n                              <div className={'artist-name'}>{result.artistName}</div>\n                              <div className={'genre'}>{result.primaryGenreName}</div>\n                              <div className={'release-date'}>{result.releaseDate}</div>\n                              <audio src={result.previewUrl} controls>\n                                Your browser does not support the audio element.\n                              </audio>\n                            </div>\n                          </li>\n                      )\n                    })\n                }\n              </InfiniteScroll>\n            </ul>\n          </Container>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}